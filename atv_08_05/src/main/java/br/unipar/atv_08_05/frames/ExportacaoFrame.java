/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.unipar.atv_08_05.frames;

import br.unipar.atv_08_05.frames.DAO.PessoaDAO;
import br.unipar.atv_08_05.models.Pessoa;
import br.unipar.atv_08_05.util.EntityManagerUtil;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author victo
 */
public class ExportacaoFrame extends javax.swing.JFrame {

    /**
     * Creates new form ExportacaoFrame
     */
    public ExportacaoFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btExportar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btExportar.setText("Exportar");
        btExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExportarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(158, 158, 158)
                .addComponent(btExportar)
                .addContainerGap(168, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(271, Short.MAX_VALUE)
                .addComponent(btExportar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExportarActionPerformed
        PessoaDAO dao = new PessoaDAO(EntityManagerUtil.getManager());
        try {
            exportarTabela(dao.findAll());
        } catch (IOException ex) {
            Logger.getLogger(ExportacaoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btExportarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExportacaoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExportacaoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExportacaoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExportacaoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ExportacaoFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btExportar;
    // End of variables declaration//GEN-END:variables

    private void exportarTabela(List<Pessoa> lista) throws IOException {
        File arquivo = new File("C:\\exportacao");
        File csv = new File(arquivo.getAbsolutePath()+"\\exportacao.csv");
        
        if(arquivo.exists()){
            System.out.println("Pasta já existente");
        }
        else{
            arquivo.mkdir();
            System.out.println("Pasta criada");
        }
        if(csv.exists()){
            System.out.println("Csv já existente");
        }else{
            csv.createNewFile();
            System.out.println("Criado novo CSV");
            
            try(FileWriter escritor = new FileWriter(csv);
                    BufferedWriter buffer = new BufferedWriter(escritor)) {
                
                for(int i=0; i<lista.size();i++){
                    Pessoa pessoa = lista.get(i);
                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                    
                    buffer.write(pessoa.getId() + ";");
                    buffer.write(pessoa.getNome() + ";");
                    buffer.write(pessoa.getIdade() + ";");
                    buffer.write(pessoa.getCpf() + ";");
                    buffer.write(pessoa.getRg() + ";");
                    buffer.write(formatter.format(pessoa.getDtNasc().toInstant().atZone(ZoneId.systemDefault()).toLocalDate()) + ";");
                    buffer.write(pessoa.getSexo() + ";");
                    buffer.write(pessoa.getSigno() + ";");
                    buffer.write(pessoa.getNmMae() + ";");
                    buffer.write(pessoa.getNmPai() + ";");
                    buffer.write(pessoa.getDsEmail() + ";");
                    buffer.write(pessoa.getSenha() + ";");
                    buffer.write(pessoa.getCep() + ";");
                    buffer.write(pessoa.getEndereco() + ";");
                    buffer.write(pessoa.getNrCasa() + ";");
                    buffer.write(pessoa.getBairro() + ";");
                    buffer.write(pessoa.getCidade() + ";");
                    buffer.write(pessoa.getEstado() + ";");
                    buffer.write(pessoa.getTelefone() + ";");
                    buffer.write(pessoa.getCelular() + ";");
                    buffer.write(pessoa.getAltura() + ";");
                    buffer.write(pessoa.getPeso() + ";");
                    buffer.write(pessoa.getTpSanguineo() + ";");
                    buffer.write(pessoa.getCor() + ";\n");
                }
            } catch (Exception e) {
            }
        }
    }
}

